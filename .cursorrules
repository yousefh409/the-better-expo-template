# Cursor AI Rules - Expo Mobile Template

You are an expert React ## 🧩 Components (CRITICAL):

**ALWAYS use `components/ui/` first!**

```tsx
// ✅ Use existing UI components
import { Button, Input, Text, Card } from '@/components/ui';

<Card className="p-4">
  <Text variant="h2">Title</Text>
  <Input placeholder="Email" />
  <Button variant="primary">Submit</Button>
</Card>

// ✅ Creating new generic component? Goes in components/ui/
// components/ui/NewComponent.tsx

// ❌ NEVER create one-off components
function CustomButton() { ... } // Extend existing Button instead
```ative + Expo developer. Code like a 10x engineer with deep mobile development experience.

## 🎯 Context & Mental Model

**Project Type**: Production-ready Expo React Native mobile app template
**Architecture**: File-based routing + TypeScript + TailwindCSS + Firebase + Zustand
**Philosophy**: AI-first patterns, consistency over cleverness, progressive enhancement

Think of this as a "mobile website" with native superpowers:
- Screens = pages (in `app/` dir)
- Components = reusable UI blocks
- Stores = global state containers
- Services = external API wrappers

## 🏗️ Tech Stack (Memorize This)

- **Expo SDK 53+** (latest stable)
- **React Native 0.79+** 
- **TypeScript** (strict mode, zero `any`)
- **Expo Router v7+** (file-based routing)
- **TailwindCSS + NativeWind** (utility-first styling)
- **Zustand** (minimal state management)
- **Firebase** (auth + Firestore)
- **React Native Reanimated** (animations)
- **Lottie** (illustrations)

## 📁 File Structure (Know by Heart)

```
app/                    # 🏠 SCREENS (Expo Router)
├── (auth)/            # 🔐 Login, signup
├── (onboarding)/      # 👋 Welcome flow  
├── (tabs)/            # 📱 Main app
└── _layout.tsx        # 🌐 Root layout

components/ui/         # 🎨 Design system (Button, Input, Text)
lib/firebase/          # 🔥 Backend services
stores/                # 📦 Zustand stores  
constants/             # ⚙️ Theme, colors
utils/                 # 🔧 Helpers
types/                 # 📝 TypeScript
```

## 🎨 Styling Rules (NEVER BREAK)

❌ **FORBIDDEN**: `style={{ backgroundColor: 'blue' }}`
✅ **REQUIRED**: `className="bg-primary"` or theme constants

```tsx
// ✅ TailwindCSS classes
<View className="flex-1 bg-background p-4 rounded-lg">

// ✅ Theme constants (for dynamic colors)
const bgColor = useThemeColor('background');

// ❌ NEVER inline styles
<View style={{ flex: 1, backgroundColor: 'white' }}>
```

**Color Rules**:
- Use `bg-primary`, `text-foreground`, etc.
- For dynamic: `useThemeColor('primary')`
- NEVER hardcode: `#3B82F6`, `'blue'`, etc.

## 🧩 Component Patterns (Copy These)

### UI Component Template:
```tsx
import { forwardRef } from 'react';
import { TouchableOpacity, TouchableOpacityProps } from 'react-native';
import { cn } from '@/utils';

export interface ButtonProps extends TouchableOpacityProps {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button = forwardRef<TouchableOpacity, ButtonProps>(
  ({ variant = 'primary', size = 'md', className, children, ...props }, ref) => (
    <TouchableOpacity
      ref={ref}
      className={cn(
        'rounded-lg items-center justify-center',
        variant === 'primary' && 'bg-primary',
        size === 'md' && 'px-4 py-3',
        className
      )}
      {...props}
    >
      <Text className="text-primary-foreground font-medium">
        {children}
      </Text>
    </TouchableOpacity>
  )
);

Button.displayName = 'Button';
```

### Screen Template:
```tsx
import { SafeAreaView } from 'react-native-safe-area-context';
import { View } from 'react-native';
import { Text } from '@/components/ui';

export default function ScreenName() {
  return (
    <SafeAreaView className="flex-1 bg-background">
      <View className="flex-1 p-4">
        <Text variant="h1">Screen Title</Text>
        {/* Content */}
      </View>
    </SafeAreaView>
  );
}
```

## 🗃️ Zustand Store Pattern:

```tsx
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface StoreState {
  // State (nouns)
  items: Item[];
  isLoading: boolean;
  error: string | null;
  
  // Actions (verbs)
  setItems: (items: Item[]) => void;
  addItem: (item: Item) => void;
  setLoading: (loading: boolean) => void;
}

export const useStore = create<StoreState>()(
  persist(
    (set) => ({
      items: [],
      isLoading: false,
      error: null,
      
      setItems: (items) => set({ items }),
      addItem: (item) => set((state) => ({ 
        items: [...state.items, item] 
      })),
      setLoading: (isLoading) => set({ isLoading }),
    }),
    {
      name: 'store-name',
      storage: createJSONStorage(() => AsyncStorage),
    }
  )
);
```

## 🧭 Navigation (Expo Router):

```tsx
import { useRouter } from 'expo-router';

const router = useRouter();

// Navigate
router.push('/profile');
router.replace('/(tabs)');
router.push({ pathname: '/user/[id]', params: { id: '123' } });
router.back();
```

## 🔥 Firebase & Auth:

```tsx
// ✅ Always use auth store directly
import { useAuthStore } from '@/stores/authStore';

const { user, signIn, signUp, signOut, isLoading, error } = useAuthStore();

// ✅ Auth operations through store
await signIn(email, password);
await signUp(email, password, { name });
await signOut();

// ❌ NEVER direct Firebase calls in components
import { AuthService } from '@/lib/firebase'; // FORBIDDEN
```

## 📱 Expo Best Practices:

```tsx
// ✅ Use Expo components
import { Image } from 'expo-image';
import { StatusBar } from 'expo-status-bar';

// ✅ Safe area handling
import { SafeAreaView } from 'react-native-safe-area-context';

// ✅ Platform-specific
import { Platform } from 'react-native';
{Platform.OS === 'ios' && <IOSComponent />}
```

## 🔤 TypeScript Rules:

```tsx
// ✅ Always type everything
interface User {
  id: string;
  name: string;
  email: string;
}

const [users, setUsers] = useState<User[]>([]);

// ❌ Never use 'any'
const data: any = fetchData(); // FORBIDDEN
```

## 🚫 NEVER Do These:

- ❌ Inline styles: `style={{ color: 'red' }}`
- ❌ Hardcoded colors: `className="bg-blue-500"`
- ❌ Direct Firebase imports in components
- ❌ `any` types
- ❌ Default exports for components
- ❌ `View` for screen roots (use `SafeAreaView`)
- ❌ React Native `Image` (use Expo `Image`)
- ❌ `useEffect` for navigation
- ❌ Creating components outside `components/ui/` when they're generic
- ❌ Using `React.memo` (keep it simple)
- ❌ AuthService in components (use auth store)

## 🎯 Development Commands:

```bash
npm start              # Expo dev server
npm run ios           # iOS simulator  
npm run android       # Android emulator
npm run setup         # Interactive setup
npm run lint          # Code quality
```

## 🔧 Quick Patterns:

**Error Handling**:
```tsx
const [state, setState] = useState({ data: null, loading: false, error: null });
```

**Form Handling**:
```tsx
const [form, setForm] = useState({ email: '', password: '' });
const updateForm = (field: string) => (value: string) => 
  setForm(prev => ({ ...prev, [field]: value }));
```

**Responsive Design**:
```tsx
const { width } = useWindowDimensions();
const imageSize = width * 0.8;
```

Remember: Consistency beats cleverness. Follow these patterns religiously for maximum AI assistance effectiveness.
